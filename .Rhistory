library(NBC)
?predict.NBAYES
source('~/.active-rstudio-document')
t1
t2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
t1
t2
source('~/.active-rstudio-document')
t1
t2
installed.packages()
source('~/Cours/SISE_M2/programmation_R/Test_package/NBC/R/fit.R')
source('~/.active-rstudio-document')
df
sapply(df, class)
sapply(df, class) == "complex"
sum(sapply(df, class) == "complex")
source('~/.active-rstudio-document')
condition
source('~/.active-rstudio-document')
sapply(df, class)
source('~/.active-rstudio-document')
source('~/Cours/SISE_M2/programmation_R/Test_package/NBC/R/fit.R')
type="rose"
if ((type!="class") || (type!="posterior") || (type!="both")) {
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
type="class"
if ((type!="class") || (type!="posterior") || (type!="both")) {
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
type="class"
if ((type!="class") & (type!="posterior") & (type!="both")) {
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
type="class"
if ((type!="class") & (type!="posterior") & (type!="both")) {
print(type)
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
type="rose"
if ((type!="class") & (type!="posterior") & (type!="both")) {
print(type)
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
type="posterior"
if ((type!="class") & (type!="posterior") & (type!="both")) {
print(type)
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
type="posterior"
if ((type!="class") & (type!="posterior") & (type!="both")) {
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
print(type)
type="both"
if ((type!="class") & (type!="posterior") & (type!="both")) {
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
print(type)
type="rooooe"
if ((type!="class") & (type!="posterior") & (type!="both")) {
stop('Wrong argument type! Must be "class", "posterior" or "both"')
}
print(type)
library(NBC)
detach("package:NBC", unload = TRUE)
library(NBC)
library(NBC)
library(RWeka)
library(stringr)
library(NBC)
source('~/Cours/SISE_M2/programmation_R/projet/v2/test_rweka.R')
res
lapply(disc[-ncol(disc)], get_cuts)
get_cuts <- function(colonne) {
cutp <- c()
for (i in 2:length(unique(colonne))) {
cutp[[i-1]] <- sapply(str_extract_all(levels(unique(colonne))[i], "-?[0-9.]+"), function(x) max(as.numeric(x)))
}
return(cutp)
}
res <- get_cuts(disc[,2])
res
lapply(disc[-ncol(disc)], get_cuts)
setwd("~/Cours/SISE_M2/programmation_R/Test_package/NBC")
modele <- fit(Species ~ ., df)
modele$cuts
cuts <- lapply(disc[-ncol(disc)], get_cuts)
cuts
library(RWeka)
library(RWeka)
library(stringr)
source("functions.R")
source("fit.R")
# Data
data(iris)
df <- iris
# Calcul du nombre de colonne a discretiser
condition1 <- sum(sapply(df, class) == "numeric")
condition2 <- sum(sapply(df, class) == "integer")
n_quanti <- condition1 + condition2
setwd("~/Cours/SISE_M2/programmation_R/Test_package/NBC")
setwd("~/Cours/SISE_M2/programmation_R/Test_package/NBC/R")
source('~/Cours/SISE_M2/programmation_R/projet/v2/test_rweka.R')
cuts
modele
disc
source('~/Cours/SISE_M2/programmation_R/projet/v2/fit.R')
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
setwd("~/Cours/SISE_M2/programmation_R/projet/v2")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# discretisation
disc <- Discretize(Species ~ ., data=df)
disc
source('~/.active-rstudio-document')
####### PACKAGE #######
print(system.time({
modele <- naiveBayes(names(Y) ~ . , train, laplace=1)
package <- predict(modele, test, "class")
}))
source('~/.active-rstudio-document')
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
modele
modele$cuts
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, mdlp=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
library(RWeka)
library(stringr)
source("functions.R")
source("fit.R")
# Data
data(iris)
df <- iris
# Calcul du nombre de colonne a discretiser
condition1 <- sum(sapply(df, class) == "numeric")
condition2 <- sum(sapply(df, class) == "integer")
n_quanti <- condition1 + condition2
# Retrouver les cuts
# data <- c()
# cutp <- c()
# for (j in 1:n_quanti) {
#   for (i in 2:length(unique(disc[,j]))) {
#     cutp[[i-1]] <- sapply(str_extract_all(unique(disc[,j])[i], "-?[0-9.]+"), function(x) max(as.numeric(x)))
#   }
# }
# data$cutp
# discretisation
disc <- Discretize(Species ~ ., data=df)
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, mdlp=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/fit.R')
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
modele$cuts
modele$cuts[[1]]
modele$cuts[[2]]
modele$cuts[[3]]
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, mdlp=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
modele$cuts[["Sepal.Length"[1]]]
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
c(1,2)
as.data.frame(c(1,2))
colnames(c(1,2)) = c("e", "é")
# Sources
source("fit.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
detach("package:NBC", unload = TRUE)
rows <- c(1, 2, 3)
colnames <- c("ee", "err", "zfez")
df <- as.data.frame(rows)
df
rbind(colnames, rows)
rbind(rows)
rbind(c(1,2))
help("rbind")
# Sources
source("fit.R")
source("predict.R")
####### DATA #######
set.seed(1)
data(iris)
df <- iris
# Train
train <- sample_n(df, 100, replace=FALSE)
# Test
test <- sample_n(df, 50, replace=FALSE)
Y <- test[5]
test <- test[-5]
####### NBAYES #######
print(system.time({modele <- fit(Species ~ . , train,  parallel=FALSE, discretize=TRUE)}))
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
modele$cuts[1]
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
source('~/Cours/SISE_M2/programmation_R/projet/v2/predict.R')
print(system.time({Mon_Bail <- predict(modele, test, "class", parallel=FALSE)}))
setwd("~/Cours/SISE_M2/programmation_R/Test_package/NBC")
source('~/.active-rstudio-document')
laplace <- integer(12)
if ((class(laplace)!="integer") | laplace<0) {
print("STOOOOP")
}
if ((class(laplace)!="integer") || laplace<0) {
print("STOOOOP")
}
laplace = "eee"
laplace <- integer(laplace)
laplace = "2"
laplace <- integer(laplace)
if ((class(laplace)!="integer") || laplace<0) {
print("STOOOOP")
}
laplace = "-2"
laplace <- integer(laplace)
if ((class(laplace)!="integer") || laplace<0) {
print("STOOOOP")
}
laplace = -12
laplace <- integer(laplace)
if ((class(laplace)!="integer") || laplace<0) {
print("STOOOOP")
}
as.integer(-12)
laplace = -12
laplace <- integer(laplace)
if ((class(laplace)!="integer") || laplace<0) {
print("STOOOOP")
}
laplace = "3"
laplace <- integer(laplace)
if ((class(laplace)!="integer") || laplace<0) {
print("STOOOOP")
}
as.integer("eee")
laplace = 0
laplace <- integer(laplace)
if ((class(laplace)!="integer") || laplace < 0) {
print("STOOOOP")
}
as.integer(0)
laplace = 0
laplace <- as.integer(laplace)
if ((class(laplace)!="integer") || laplace < 0) {
print("STOOOOP")
}
laplace = -1
laplace <- as.integer(laplace)
if ((class(laplace)!="integer") || laplace < 0) {
print("STOOOOP")
}
laplace = TRUE
laplace <- as.integer(laplace)
if ((class(laplace)!="integer") || laplace < 0) {
print("STOOOOP")
}
laplace
laplace = TRUE
laplace <- as.integer(laplace)
laplace
data(iris)
df[1,] <- c(NA, NA, NA, 4, NA)
df[1,1] <- NA
df[1,1] <- "NA"
df[1,1]
df <- iris
df
df[1,1]
df[1,1] <- NA
df[1,]
df[3,3] <- NA
df
na.omit(df)
df
df <- na.omit(df)
df
21/25
3/5
2/5
26/7
library(NBC)
?mdlp_para
library(NBC)
?mdlp_para
?fit
?Discretization
?discret
?fit
library(NBC)
library(NBC)
?fit
setwd("~/Cours/SISE_M2/programmation_R/Test_package/NBC")
devtools::use_data_raw()
library(devtools)
devtools::use_data_raw()
use_data_raw()
fish <- read.csv("/Users/d/Cours/SISE_M2/Data_Sets/fish.csv")
usethis::use_data("fish")
usethis::use_data(fish)
fish
fish <- read.csv("/Users/d/Cours/SISE_M2/Data_Sets/fish.csv")
usethis::use_data(fish)
library(NBC)
library(NBC)
?fit
?fish
library(NBC)
